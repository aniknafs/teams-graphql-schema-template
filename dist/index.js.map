{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./utils/capitalize.ts","webpack:///./utils/get-result-type.ts","webpack:///external \"handlebars\"","webpack:///./helpers/get-field-resolver-name.ts","webpack:///./helpers/get-field-resolver.ts","webpack:///./helpers/get-optionals.ts","webpack:///./helpers/get-type.ts","webpack:///external \"graphql-codegen-core\"","webpack:///./enum.handlebars","webpack:///./fragments.handlebars","webpack:///./selection-set.handlebars","webpack:///./documents.handlebars","webpack:///./resolver.handlebars","webpack:///./schema.handlebars","webpack:///./type.handlebars","webpack:///./template.handlebars","webpack:///./config.ts","webpack:///./index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","capitalize","str","charAt","toUpperCase","slice","getResultType","type","options","baseType","realType","data","root","primitivesMap","useImmutable","config","immutableTypes","isArray","result","isNullableArray","join","isRequired","require","capitalize_1","getFieldResolverName","handlebars_1","get_result_type_1","getFieldResolver","hasArguments","SafeString","getOptionals","avoidOptionals","getType","index","schema","resolver","documents","selectionSet","fragments","enumTemplate","graphql_codegen_core_1","get_type_1","get_optionals_1","get_field_resolver_1","get_field_resolver_name_1","inputType","EInputType","SINGLE_FILE","templates","enum","flattenTypes","primitives","String","Int","Float","Boolean","ID","customHelpers","convertedType","resolvers","outFile","config_1","default"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","export function capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n","export function getResultType(type, options) {\n  const baseType = type.type;\n  const realType = options.data.root.primitivesMap[baseType] || baseType;\n  const useImmutable = !!(options.data.root.config || {}).immutableTypes;\n\n  if (type.isArray) {\n    let result = realType;\n\n    if (type.isNullableArray) {\n      result = useImmutable ? [realType, 'null'].join(' | ') : `(${[realType, 'null'].join(' | ')})`;\n    }\n\n    if (useImmutable) {\n      result = `ReadonlyArray<${result}>`;\n    } else {\n      result = `${result}[]`;\n    }\n\n    if (!type.isRequired) {\n      result = [result, 'null'].join(' | ');\n    }\n\n    return result;\n  } else {\n    if (type.isRequired) {\n      return realType;\n    } else {\n      return [realType, 'null'].join(' | ');\n    }\n  }\n}\n","module.exports = require(\"handlebars\");","import { capitalize } from '../utils/capitalize';\n\nexport function getFieldResolverName(name) {\n  return `${capitalize(name)}Resolver`;\n}\n","import { SafeString } from 'handlebars';\nimport { getResultType } from '../utils/get-result-type';\nimport { capitalize } from '../utils/capitalize';\n\nexport function getFieldResolver(type, options) {\n  if (!type) {\n    return '';\n  }\n\n  let result;\n  const realType = getResultType(type, options);\n\n  if (type.hasArguments) {\n    result = `Resolver<${realType}, ${capitalize(type.name)}Args>`;\n  } else {\n    result = `Resolver<${realType}>`;\n  }\n\n  return new SafeString(result);\n}\n","export function getOptionals(type, options) {\n  const config = options.data.root.config || {};\n\n  if (\n    config.avoidOptionals === '1' ||\n    config.avoidOptionals === 'true' ||\n    config.avoidOptionals === true ||\n    config.avoidOptionals === 1\n  ) {\n    return '';\n  }\n\n  if (!type.isRequired) {\n    return '?';\n  }\n\n  return '';\n}\n","import { SafeString } from 'handlebars';\nimport { getResultType } from '../utils/get-result-type';\n\nexport function getType(type, options) {\n  if (!type) {\n    return '';\n  }\n\n  const result = getResultType(type, options);\n\n  return new SafeString(result);\n}\n","module.exports = require(\"graphql-codegen-core\");","module.exports = \"\\n\\n{{#if @root.config.enumsAsTypes }}\\nexport type {{ name }} = {{#each values }}\\\"{{ value }}\\\"{{#unless @last}} | {{/unless}}{{/each}};\\n{{else}}\\nexport enum {{ name }} {\\n{{#each values }}\\n  {{value}} = \\\"{{ value }}\\\",\\n{{/each}}\\n}\\n{{/if}}\\n\"","module.exports = \"{{#if hasFragmentsSpread}}{{#if hasFields}} & {{/if}}{{#each fragmentsSpread}}{{fragmentName}}.Fragment{{#unless @last}} & {{/unless}}{{/each}}{{/if}}{{#if hasInlineFragments}}{{#if hasFields}} & ({{/if}}{{#each inlineFragments}}{{onType}}{{#unless @last}} | {{/unless}}{{/each}}{{#if hasFields}}){{/if}}{{/if}}\\n\"","module.exports = \"{{#each this}}\\n{{#if @root.config.immutableTypes }}readonly {{/if}}{{ name }}{{ getOptionals this }}: {{ convertedType this }}; \\n{{/each}}\\n\"","module.exports = \"{{#each operations }}\\nexport namespace {{ toPascalCase name }} {\\n  export type Variables = {\\n  {{#each variables}}\\n    {{#if @root.config.immutableTypes }}readonly {{/if}}{{ name }}{{ getOptionals this }}: {{ convertedType this }};\\n  {{/each}}\\n  }\\n\\n  export type {{ toPascalCase operationType }} ={{#if hasFields}} {\\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: \\\"{{ toPascalCase operationType }}\\\";\\n    {{> selectionSet fields }}\\n  }{{/if}}{{> fragments this }}\\n  {{#each innerModels }}\\n\\n  export type {{ modelType }} ={{#if hasFields}} {\\n  {{#unless hasInlineFragments}}\\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: \\\"{{ schemaBaseType }}\\\";\\n  {{else}}\\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: {{#each inlineFragments}}{{onType}}[\\\"__typename\\\"]{{#unless @last}} | {{/unless}}{{/each}};\\n  {{/unless}}\\n    {{> selectionSet fields }}\\n  }{{/if}}{{> fragments this }}\\n  {{/each}}\\n}\\n{{/each}}\\n{{#each fragments }}\\n\\nexport namespace {{name}} {\\n  export type Fragment ={{#if hasFields}} {\\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: \\\"{{ onType }}\\\";\\n    {{> selectionSet fields }}\\n  }{{/if}}{{> fragments this }}\\n  {{#each innerModels }}\\n\\n  export type {{ modelType }} ={{#if hasFields}} {\\n  {{#unless hasInlineFragments}}\\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: \\\"{{ schemaBaseType }}\\\";\\n  {{else}}\\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: {{#each inlineFragments}}{{onType}}[\\\"__typename\\\"]{{#unless @last}} | {{/unless}}{{/each}};\\n  {{/unless}}\\n    {{> selectionSet fields }}\\n  }{{/if}}{{> fragments this }}\\n  {{/each}}\\n}\\n{{/each}}\\n\\n\"","module.exports = \"\\nexport namespace {{ name }}Resolvers {\\n  export interface Resolvers {\\n    {{#each fields}}\\n    {{ name }}?: {{ getFieldResolverName name }}; \\n    {{/each}}\\n  }\\n\\n  {{#each fields}}\\n  export type {{ getFieldResolverName name }} = {{ getFieldResolver this }};\\n\\n  {{~# if hasArguments }}\\n\\n  export interface {{ toPascalCase name }}Args {\\n  {{#each arguments}}\\n    {{ name }}{{ getOptionals this }}: {{ convertedType this }}; \\n  {{/each}}\\n  }\\n\\n  {{/if}}\\n  {{/each}}\\n  \\n}\\n\"","module.exports = \"{{#ifCond @root.config.resolvers \\\"!==\\\" false}}\\nimport { GraphQLResolveInfo } from 'graphql';\\n\\ntype Resolver<Result, Args = any> = (\\n  parent: any,\\n  args: Args,\\n  context: any,\\n  info?: GraphQLResolveInfo\\n) => Promise<Result> | Result;\\n{{/ifCond}}\\n\\n{{#each scalars}}\\n\\n\\nexport type {{ name }} = any;\\n{{/each}}\\n{{#each interfaces}}\\n  {{~> type }}\\n\\n{{/each}}\\n{{#each types}}\\n  {{~> type }}\\n\\n{{/each}}\\n{{#ifCond @root.config.resolvers \\\"!==\\\" false }}\\n{{#each types}}\\n  {{~> resolver }}  \\n\\n{{/each}}\\n{{/ifCond}}\\n{{#each inputTypes}}\\n  {{~> type }}\\n\\n{{/each}}\\n{{~#each types}}\\n  {{~#each fields}}\\n    {{~# if hasArguments }}\\nexport interface {{ toPascalCase name }}{{ toPascalCase ../name }}Args {\\n{{#each arguments}}\\n  {{ name }}{{ getOptionals this }}: {{ convertedType this }}; \\n{{/each}}\\n}\\n    {{/if}}\\n  {{/each}}\\n{{/each}}\\n{{#each enums}}\\n  {{~> enum }}\\n{{/each}}\\n{{#each unions}}\\n\\nexport type {{ name }} = {{#each possibleTypes}}{{this}}{{#unless @last}} | {{/unless}}{{/each}};\\n\\n{{/each}}\\n\"","module.exports = \"\\nexport interface {{ name }}{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {\\n{{#each fields}}\\n  {{#if @root.config.immutableTypes }}readonly {{/if}}{{ name }}{{ getOptionals this }}: {{ convertedType this }}; \\n{{/each}}\\n   __typename?: \\\"{{ name }}\\\";\\n}\\n\"","module.exports = \"/* eslint-disable */\\n/* tslint:disable */\\n{{#if config.printTime }}\\n/** Generated in {{ currentTime }} */\\n{{/if}}\\n{{> schema }}\\n{{> documents }}\\n\"","import * as index from './template.handlebars';\nimport * as type from './type.handlebars';\nimport * as schema from './schema.handlebars';\nimport * as resolver from './resolver.handlebars';\nimport * as documents from './documents.handlebars';\nimport * as selectionSet from './selection-set.handlebars';\nimport * as fragments from './fragments.handlebars';\nimport * as enumTemplate from './enum.handlebars';\nimport { EInputType, GeneratorConfig } from 'graphql-codegen-core';\nimport { getType } from './helpers/get-type';\nimport { getOptionals } from './helpers/get-optionals';\nimport { getFieldResolver } from './helpers/get-field-resolver';\nimport { getFieldResolverName } from './helpers/get-field-resolver-name';\n\nexport const config: GeneratorConfig = {\n  inputType: EInputType.SINGLE_FILE,\n  templates: {\n    index,\n    type,\n    schema,\n    resolver,\n    documents,\n    selectionSet,\n    fragments,\n    enum: enumTemplate\n  },\n  flattenTypes: true,\n  primitives: {\n    String: 'string',\n    Int: 'number',\n    Float: 'number',\n    Boolean: 'boolean',\n    ID: 'string'\n  },\n  customHelpers: {\n    convertedType: getType,\n    getFieldResolver,\n    getFieldResolverName,\n    getOptionals\n  },\n  config: {\n    resolvers: true,\n    avoidOptionals: false\n  },\n  outFile: 'types.ts'\n  // filesExtension: 'interface.ts'\n};\n","import { config } from './config';\n\nexport default config;\n"],"sourceRoot":""}