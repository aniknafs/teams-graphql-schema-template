!function(e,n){for(var t in n)e[t]=n[t]}(exports,function(e){var n={};function t(a){if(n[a])return n[a].exports;var s=n[a]={i:a,l:!1,exports:{}};return e[a].call(s.exports,s,s.exports,t),s.l=!0,s.exports}return t.m=e,t.c=n,t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:a})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(t.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var s in e)t.d(a,s,function(n){return e[n]}.bind(null,s));return a},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=17)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.capitalize=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getResultType=function(e,n){var t=e.type,a=n.data.root.primitivesMap[t]||t,s=!!(n.data.root.config||{}).immutableTypes;if(e.isArray){var i=a;return e.isNullableArray&&(i=s?[a,"null"].join(" | "):"("+[a,"null"].join(" | ")+")"),s?i="ReadonlyArray<"+i+">":i+="[]",e.isRequired||(i=[i,"null"].join(" | ")),i}return e.isRequired?a:[a,"null"].join(" | ")}},function(e,n){e.exports=require("handlebars")},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(0);n.getFieldResolverName=function(e){return a.capitalize(e)+"Resolver"}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(2),s=t(1),i=t(0);n.getFieldResolver=function(e,n){if(!e)return"";var t,r=s.getResultType(e,n);return t=e.hasArguments?"Resolver<"+r+", "+i.capitalize(e.name)+"Args>":"Resolver<"+r+">",new a.SafeString(t)}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getOptionals=function(e,n){var t=n.data.root.config||{};return"1"===t.avoidOptionals||"true"===t.avoidOptionals||!0===t.avoidOptionals||1===t.avoidOptionals?"":e.isRequired?"":"?"}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(2),s=t(1);n.getType=function(e,n){if(!e)return"";var t=s.getResultType(e,n);return new a.SafeString(t)}},function(e,n){e.exports=require("graphql-codegen-core")},function(e,n){e.exports='\n\n{{#if @root.config.enumsAsTypes }}\nexport type {{ name }} = {{#each values }}"{{ value }}"{{#unless @last}} | {{/unless}}{{/each}};\n{{else}}\nexport enum {{ name }} {\n{{#each values }}\n  {{value}} = "{{ value }}",\n{{/each}}\n}\n{{/if}}\n'},function(e,n){e.exports="{{#if hasFragmentsSpread}}{{#if hasFields}} & {{/if}}{{#each fragmentsSpread}}{{fragmentName}}.Fragment{{#unless @last}} & {{/unless}}{{/each}}{{/if}}{{#if hasInlineFragments}}{{#if hasFields}} & ({{/if}}{{#each inlineFragments}}{{onType}}{{#unless @last}} | {{/unless}}{{/each}}{{#if hasFields}}){{/if}}{{/if}}\n"},function(e,n){e.exports="{{#each this}}\n{{#if @root.config.immutableTypes }}readonly {{/if}}{{ name }}{{ getOptionals this }}: {{ convertedType this }}; \n{{/each}}\n"},function(e,n){e.exports='{{#each operations }}\nexport namespace {{ toPascalCase name }} {\n  export type Variables = {\n  {{#each variables}}\n    {{#if @root.config.immutableTypes }}readonly {{/if}}{{ name }}{{ getOptionals this }}: {{ convertedType this }};\n  {{/each}}\n  }\n\n  export type {{ toPascalCase operationType }} ={{#if hasFields}} {\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: "{{ toPascalCase operationType }}";\n    {{> selectionSet fields }}\n  }{{/if}}{{> fragments this }}\n  {{#each innerModels }}\n\n  export type {{ modelType }} ={{#if hasFields}} {\n  {{#unless hasInlineFragments}}\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: "{{ schemaBaseType }}";\n  {{else}}\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: {{#each inlineFragments}}{{onType}}["__typename"]{{#unless @last}} | {{/unless}}{{/each}};\n  {{/unless}}\n    {{> selectionSet fields }}\n  }{{/if}}{{> fragments this }}\n  {{/each}}\n}\n{{/each}}\n{{#each fragments }}\n\nexport namespace {{name}} {\n  export type Fragment ={{#if hasFields}} {\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: "{{ onType }}";\n    {{> selectionSet fields }}\n  }{{/if}}{{> fragments this }}\n  {{#each innerModels }}\n\n  export type {{ modelType }} ={{#if hasFields}} {\n  {{#unless hasInlineFragments}}\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: "{{ schemaBaseType }}";\n  {{else}}\n    {{#if @root.config.immutableTypes }}readonly {{/if}}__typename?: {{#each inlineFragments}}{{onType}}["__typename"]{{#unless @last}} | {{/unless}}{{/each}};\n  {{/unless}}\n    {{> selectionSet fields }}\n  }{{/if}}{{> fragments this }}\n  {{/each}}\n}\n{{/each}}\n\n'},function(e,n){e.exports="\nexport namespace {{ name }}Resolvers {\n  export interface Resolvers {\n    {{#each fields}}\n    {{ name }}?: {{ getFieldResolverName name }}; \n    {{/each}}\n  }\n\n  {{#each fields}}\n  export type {{ getFieldResolverName name }} = {{ getFieldResolver this }};\n\n  {{~# if hasArguments }}\n\n  export interface {{ toPascalCase name }}Args {\n  {{#each arguments}}\n    {{ name }}{{ getOptionals this }}: {{ convertedType this }}; \n  {{/each}}\n  }\n\n  {{/if}}\n  {{/each}}\n  \n}\n"},function(e,n){e.exports='{{#ifCond @root.config.resolvers "!==" false}}\nimport { GraphQLResolveInfo } from \'graphql\';\n\ntype Resolver<Result, Args = any> = (\n  parent: any,\n  args: Args,\n  context: any,\n  info: GraphQLResolveInfo\n) => Promise<Result> | Result;\n{{/ifCond}}\n\n{{#each scalars}}\n\n\nexport type {{ name }} = any;\n{{/each}}\n{{#each interfaces}}\n  {{~> type }}\n\n{{/each}}\n{{#each types}}\n  {{~> type }}\n\n{{/each}}\n{{#ifCond @root.config.resolvers "!==" false }}\n{{#each types}}\n  {{~> resolver }}  \n\n{{/each}}\n{{/ifCond}}\n{{#each inputTypes}}\n  {{~> type }}\n\n{{/each}}\n{{~#each types}}\n  {{~#each fields}}\n    {{~# if hasArguments }}\nexport interface {{ toPascalCase name }}{{ toPascalCase ../name }}Args {\n{{#each arguments}}\n  {{ name }}{{ getOptionals this }}: {{ convertedType this }}; \n{{/each}}\n}\n    {{/if}}\n  {{/each}}\n{{/each}}\n{{#each enums}}\n  {{~> enum }}\n{{/each}}\n{{#each unions}}\n\nexport type {{ name }} = {{#each possibleTypes}}{{this}}{{#unless @last}} | {{/unless}}{{/each}};\n\n{{/each}}\n'},function(e,n){e.exports='\nexport interface {{ name }}{{#if hasInterfaces}} extends {{#each interfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {\n{{#each fields}}\n  {{#if @root.config.immutableTypes }}readonly {{/if}}{{ name }}{{ getOptionals this }}: {{ convertedType this }}; \n{{/each}}\n   __typename?: "{{ name }}";\n}\n'},function(e,n){e.exports="/* tslint:disable */\n{{#if config.printTime }}\n/** Generated in {{ currentTime }} */\n{{/if}}\n{{> schema }}\n{{> documents }}\n"},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(15),s=t(14),i=t(13),r=t(12),o=t(11),l=t(10),c=t(9),u=t(8),f=t(7),p=t(6),m=t(5),d=t(4),y=t(3);n.config={inputType:f.EInputType.SINGLE_FILE,templates:{index:a,type:s,schema:i,resolver:r,documents:o,selectionSet:l,fragments:c,enum:u},flattenTypes:!0,primitives:{String:"string",Int:"number",Float:"number",Boolean:"boolean",ID:"string"},customHelpers:{convertedType:p.getType,getFieldResolver:d.getFieldResolver,getFieldResolverName:y.getFieldResolverName,getOptionals:m.getOptionals},outFile:"types.ts",config:{resolvers:!1,avoidOptionals:!1}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var a=t(16);n.default=a.config}]));
//# sourceMappingURL=index.js.map